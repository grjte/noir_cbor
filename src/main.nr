mod cbor_types;
mod cbor_error;
mod cbor_encoder;
mod cbor_decoder;

use cbor_types::Value;
use cbor_encoder::CborEncoder;
use cbor_decoder::CborDecoder;

// nint = "-4294967297"
// uint = "18446744073709551615"
//
// cost:
// {
//     "acir_opcodes": 1196,
//     "circuit_size": 7526,
//     "gates_per_opcode": [3,4,0,1,3,2,0,3,1,1,0,1,3,1,0,1,4,1,1,0,3,89,1,1,1,1,1,1,0,3,1,1,0,1,3,1,1,0,686,345,1,2,1,1,1,1,0,3,1,1,0,15,6,1,1,1,1,1,0,3,2,1,0,3,1,1,1,1,1,1,0,3,1,1,1,1,0,1,6,1,4,1,1,1,1,0,5,3,1,3,1,1,1,0,3,1,1,0,174,1369,1,2,1,1,1,0,3,2,1,0,6,10,1,1,1,1,1,0,3,1,1,0,3,1,1,1,1,1,1,0,3,1,1,0,4,1,1,2,1,1,1,0,3,1,1,0,3,2,1,1,1,1,1,0,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,3,1,1,2847,1,43,1,46,1,43,1,46,1,43,1,46,1,0,1,4,1,0,1,3,1,0,1,4,1,1,0,3,1,1,0,1,3,1,1,0,1,3,1,1,0,3,1,1,2,1,1,1,1,0,3,2,1,0,1,3,1,1,0,1,2,1,2,1,1,1,1,0,3,1,1,0,2,3,1,1,1,1,1,0,3,1,1,0,3,1,1,1,1,1,1,0,3,2,1,1,1,0,1,3,1,3,1,1,1,1,0,1,3,1,3,1,1,1,0,3,1,1,0,2,1,1,2,1,1,1,0,3,1,1,0,2,2,1,1,1,1,1,0,3,2,1,0,2,1,1,1,1,1,1,0,3,1,1,0,3,1,1,2,1,1,1,0,3,1,1,0,3,1,1,2,1,1,1,0,3,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,0,1,3,1,0,1,4,1,0,1,3,1,1,1,1,1,1,0,1,3,1,0,3,1,1,1,38,0,1,4,1,1,0,1,3,1,1,0,3,1,1,1,1,1,1,1,0,3,1,1,0,1,3,1,1,0,1,2,1,2,1,1,1,1,0,3,2,1,0,2,3,1,1,1,1,1,0,3,1,1,0,3,1,1,2,1,1,1,0,3,1,1,1,1,0,1,3,1,3,1,1,1,1,0,1,3,1,4,1,1,1,0,3,2,1,0,1,2,1,2,1,1,1,0,3,1,1,0,1,3,1,1,1,1,1,0,3,1,1,0,3,1,1,1,1,1,1,0,3,1,1,0,4,1,1,2,1,1,1,0,3,2,1,0,3,1,1,1,1,1,1,0,3,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,45,1,44,1,45,1,44,1,45,1,44,1,45,0,1,3,1,0,1,4,1,0,1,3,1,1,0]
// }
fn main(uint: u64, nint: i64) {
    // encode/decode unsigned integer
    let uval = Value::new_uint(uint);
    let mut encoded = [0; 9];
    CborEncoder::encode(uval, &mut encoded);
    assert(encoded[0] == 0x1b);

    let decoded = CborDecoder::decode(encoded);
    assert(decoded.type_tag == uval.type_tag);
    assert(decoded.uint_value == uval.uint_value);

    // encode/decode negative integer
    let nval = Value::new_int(nint);
    let mut encoded = [0; 9];
    CborEncoder::encode(nval, &mut encoded);
    assert(encoded[0] == 0x3b);

    let decoded = CborDecoder::decode(encoded);
    assert(decoded.type_tag == nval.type_tag);
    assert(decoded.int_value == nval.int_value);
}
